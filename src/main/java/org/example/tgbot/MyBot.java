package org.example.tgbot;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.*;

@Component
public class MyBot extends TelegramLongPollingBot {

    @Autowired
    private UserRepository userRepository;

    // üëá ID —á–µ–ª–æ–≤–µ–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –±–æ—Ç –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å
    private final Long targetUserId = 2017827907L; // –∑–∞–º–µ–Ω–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π userId

    @Override
    public String getBotUsername() {
        return "ped1kBot";
    }

    @Override
    public String getBotToken() {
        return "8446642573:AAHRjzLOkWoYoq6pe3VvZ-HyBgcvHEBgX_4";
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {

            Long chatId = update.getMessage().getChatId();
            Long userId = update.getMessage().getFrom().getId();
            String username = update.getMessage().getFrom().getUserName();
            String firstName = update.getMessage().getFrom().getFirstName();
            String incomingMessage = update.getMessage().getText().toLowerCase();

            // ‚ùå –ï—Å–ª–∏ –ø–∏—à–µ—Ç –Ω–µ –Ω—É–∂–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ ‚Äî –≤—ã—Ö–æ–¥–∏–º
            if (!userId.equals(targetUserId)) {
                return;
            }

            // üé≤ 70% —à–∞–Ω—Å, —á—Ç–æ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç
            Random random = new Random();
            int chance = random.nextInt(100);
            if (chance >= 60) { // 30% —Å–ª—É—á–∞–µ–≤ ‚Äî –º–æ–ª—á–∏—Ç
                System.out.println("ü§´ —è –Ω–µ –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —ç—Ç—É —Ö—É–π–Ω—é");
                return;
            }

            // ‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            Map<String, String> replyMap = new HashMap<>();
            replyMap.put("–ø–µ–¥–∏–∫ –ø—Ä–∏–≤–µ—Ç", "–ü—Ä–∏–≤–µ—Ç! üòé");
            replyMap.put("–ø–µ–¥–∏–∫ –∫–∞–∫ –¥–µ–ª–∞", "–ù–æ—Ä–º–∞–ª—å–Ω–æ, —É —Ç–µ–±—è –∫–∞–∫?");
            replyMap.put("–ø–µ–¥–∏–∫ —á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è", "–µ—â–µ –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª üòÖ");
            replyMap.put("–ø–µ–¥–∏–∫ –ø–æ–∫–∞", "–ü–æ–∫–∞, –ª–æ—Öüëã");

            // ‚úÖ –°–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–≥–æ—Ç–æ–≤–∫–∏)
            List<String> randomReplies = Arrays.asList(
                    "–†–æ–º–∞ –µ–±–ª–∞–Ω üòè",
                    "–†–æ–º–∞–Ω –∂–∏—Ä–Ω—ã–π —É–µ–±–∞–Ω",
                    "–†–æ–º—á–∏–∫ –∞–π —Å—ã–Ω –ò–ì–ò–õ–ê",
                    "–±–ª—è –†–æ–º–∞ –∑–∞–µ–±–∞–ªüòé",
                    "–†–æ–º–∞ –¥–∞–π –¥–µ–Ω–µ–≥",
                    "–¥–∞ –∑–∞–≤–∞–ª–∏ –µ–±–∞–ª–æ",
                    "—Ö–∑ –Ω–µ –ø—Ä–∏–¥—É–º–∞–ªüò≥"
            );

            boolean responded = false;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º ‚Äî –µ—Å—Ç—å –ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∑–∞–≥–æ—Ç–æ–≤–∫–æ–π
            for (Map.Entry<String, String> entry : replyMap.entrySet()) {
                if (incomingMessage.contains(entry.getKey())) {
                    sendMessage(chatId, entry.getValue());
                    responded = true;
                    break;
                }
            }

            // üß† –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–≥–æ—Ç–æ–≤–∫–∏ ‚Äî –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç
            if (!responded) {
                String randomReply = randomReplies.get(random.nextInt(randomReplies.size()));
                sendMessage(chatId, randomReply);
            }

            // üóÇ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if (userRepository.findByChatId(chatId).isEmpty()) {
                userRepository.save(new User(chatId, username, firstName));
                sendText(chatId, "–ü—Ä–∏–≤–µ—Ç! –Ø –°–≥–ª—ã–ø–∞, —Ç–µ–ø–µ—Ä—å —è —Å –≤–∞–º–∏ üòé");
            }
        }
    }

    private void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendText(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        System.out.println("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç " + chatId + ": " + text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}